/*
 * generated by Xtext 2.19.0
 */
package de.sos.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import de.sos.ide.contentassist.antlr.internal.InternalMORAParser;
import de.sos.services.MORAGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class MORAParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MORAGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MORAGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getModelAccess().getAlternatives_5_0(), "rule__Model__Alternatives_5_0");
			builder.put(grammarAccess.getOptionsAccess().getAlternatives_2(), "rule__Options__Alternatives_2");
			builder.put(grammarAccess.getTypeDeclAccess().getAlternatives(), "rule__TypeDecl__Alternatives");
			builder.put(grammarAccess.getSingleTypeDeclAccess().getAlternatives(), "rule__SingleTypeDecl__Alternatives");
			builder.put(grammarAccess.getMemberAccess().getAlternatives_2(), "rule__Member__Alternatives_2");
			builder.put(grammarAccess.getListTypeDeclAccess().getAlternatives_3(), "rule__ListTypeDecl__Alternatives_3");
			builder.put(grammarAccess.getMethodAccess().getAlternatives_1(), "rule__Method__Alternatives_1");
			builder.put(grammarAccess.getMethodAccess().getAlternatives_1_1(), "rule__Method__Alternatives_1_1");
			builder.put(grammarAccess.getParameterAccess().getAlternatives_0(), "rule__Parameter__Alternatives_0");
			builder.put(grammarAccess.getQualifiedNameAccess().getAlternatives_1_0(), "rule__QualifiedName__Alternatives_1_0");
			builder.put(grammarAccess.getPrimTypeLiteralAccess().getAlternatives(), "rule__PrimTypeLiteral__Alternatives");
			builder.put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
			builder.put(grammarAccess.getModelAccess().getGroup_5(), "rule__Model__Group_5__0");
			builder.put(grammarAccess.getIncludeAccess().getGroup(), "rule__Include__Group__0");
			builder.put(grammarAccess.getOptionsAccess().getGroup(), "rule__Options__Group__0");
			builder.put(grammarAccess.getJavaOptionsAccess().getGroup(), "rule__JavaOptions__Group__0");
			builder.put(grammarAccess.getCSharpOptionsAccess().getGroup(), "rule__CSharpOptions__Group__0");
			builder.put(grammarAccess.getCppOptionsAccess().getGroup(), "rule__CppOptions__Group__0");
			builder.put(grammarAccess.getAnnotationAccess().getGroup(), "rule__Annotation__Group__0");
			builder.put(grammarAccess.getAnnotationAccess().getGroup_2(), "rule__Annotation__Group_2__0");
			builder.put(grammarAccess.getStructDeclAccess().getGroup(), "rule__StructDecl__Group__0");
			builder.put(grammarAccess.getStructDeclAccess().getGroup_5(), "rule__StructDecl__Group_5__0");
			builder.put(grammarAccess.getMemberAccess().getGroup(), "rule__Member__Group__0");
			builder.put(grammarAccess.getEnumDeclAccess().getGroup(), "rule__EnumDecl__Group__0");
			builder.put(grammarAccess.getEnumDeclAccess().getGroup_4(), "rule__EnumDecl__Group_4__0");
			builder.put(grammarAccess.getLiteralAccess().getGroup(), "rule__Literal__Group__0");
			builder.put(grammarAccess.getLiteralAccess().getGroup_2(), "rule__Literal__Group_2__0");
			builder.put(grammarAccess.getListTypeDeclAccess().getGroup(), "rule__ListTypeDecl__Group__0");
			builder.put(grammarAccess.getInterfaceAccess().getGroup(), "rule__Interface__Group__0");
			builder.put(grammarAccess.getInterfaceAccess().getGroup_4(), "rule__Interface__Group_4__0");
			builder.put(grammarAccess.getInterfaceAccess().getGroup_4_2(), "rule__Interface__Group_4_2__0");
			builder.put(grammarAccess.getInterfaceAccess().getGroup_6(), "rule__Interface__Group_6__0");
			builder.put(grammarAccess.getMethodAccess().getGroup(), "rule__Method__Group__0");
			builder.put(grammarAccess.getMethodAccess().getGroup_1_0(), "rule__Method__Group_1_0__0");
			builder.put(grammarAccess.getMethodAccess().getGroup_4(), "rule__Method__Group_4__0");
			builder.put(grammarAccess.getMethodAccess().getGroup_4_1(), "rule__Method__Group_4_1__0");
			builder.put(grammarAccess.getMethodAccess().getGroup_6(), "rule__Method__Group_6__0");
			builder.put(grammarAccess.getMethodAccess().getGroup_6_2(), "rule__Method__Group_6_2__0");
			builder.put(grammarAccess.getExceptionAccess().getGroup(), "rule__Exception__Group__0");
			builder.put(grammarAccess.getExceptionAccess().getGroup_3(), "rule__Exception__Group_3__0");
			builder.put(grammarAccess.getParameterAccess().getGroup(), "rule__Parameter__Group__0");
			builder.put(grammarAccess.getParameterAccess().getGroup_0_2(), "rule__Parameter__Group_0_2__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
			builder.put(grammarAccess.getModelAccess().getIncludesAssignment_0(), "rule__Model__IncludesAssignment_0");
			builder.put(grammarAccess.getModelAccess().getOptionsAssignment_1(), "rule__Model__OptionsAssignment_1");
			builder.put(grammarAccess.getModelAccess().getNameAssignment_3(), "rule__Model__NameAssignment_3");
			builder.put(grammarAccess.getModelAccess().getInterfacesAssignment_5_0_0(), "rule__Model__InterfacesAssignment_5_0_0");
			builder.put(grammarAccess.getModelAccess().getTypesAssignment_5_0_1(), "rule__Model__TypesAssignment_5_0_1");
			builder.put(grammarAccess.getIncludeAccess().getImportUriAssignment_1(), "rule__Include__ImportUriAssignment_1");
			builder.put(grammarAccess.getOptionsAccess().getJavaOptionsAssignment_2_0(), "rule__Options__JavaOptionsAssignment_2_0");
			builder.put(grammarAccess.getOptionsAccess().getCsOptionsAssignment_2_1(), "rule__Options__CsOptionsAssignment_2_1");
			builder.put(grammarAccess.getOptionsAccess().getCppOptionsAssignment_2_2(), "rule__Options__CppOptionsAssignment_2_2");
			builder.put(grammarAccess.getJavaOptionsAccess().getBasePackageAssignment_4(), "rule__JavaOptions__BasePackageAssignment_4");
			builder.put(grammarAccess.getCSharpOptionsAccess().getBaseNamespaceAssignment_4(), "rule__CSharpOptions__BaseNamespaceAssignment_4");
			builder.put(grammarAccess.getCppOptionsAccess().getBaseNamespaceAssignment_4(), "rule__CppOptions__BaseNamespaceAssignment_4");
			builder.put(grammarAccess.getPrimTypeDeclAccess().getNameAssignment(), "rule__PrimTypeDecl__NameAssignment");
			builder.put(grammarAccess.getAnnotationAccess().getNameAssignment_1(), "rule__Annotation__NameAssignment_1");
			builder.put(grammarAccess.getAnnotationAccess().getValueAssignment_2_1(), "rule__Annotation__ValueAssignment_2_1");
			builder.put(grammarAccess.getStructDeclAccess().getDocAssignment_0(), "rule__StructDecl__DocAssignment_0");
			builder.put(grammarAccess.getStructDeclAccess().getAnnoAssignment_1(), "rule__StructDecl__AnnoAssignment_1");
			builder.put(grammarAccess.getStructDeclAccess().getNameAssignment_3(), "rule__StructDecl__NameAssignment_3");
			builder.put(grammarAccess.getStructDeclAccess().getMemberAssignment_5_0(), "rule__StructDecl__MemberAssignment_5_0");
			builder.put(grammarAccess.getMemberAccess().getDocAssignment_0(), "rule__Member__DocAssignment_0");
			builder.put(grammarAccess.getMemberAccess().getAnnoAssignment_1(), "rule__Member__AnnoAssignment_1");
			builder.put(grammarAccess.getMemberAccess().getComplexTypeAssignment_2_0(), "rule__Member__ComplexTypeAssignment_2_0");
			builder.put(grammarAccess.getMemberAccess().getPrimTypeAssignment_2_1(), "rule__Member__PrimTypeAssignment_2_1");
			builder.put(grammarAccess.getMemberAccess().getNameAssignment_3(), "rule__Member__NameAssignment_3");
			builder.put(grammarAccess.getEnumDeclAccess().getDocAssignment_0(), "rule__EnumDecl__DocAssignment_0");
			builder.put(grammarAccess.getEnumDeclAccess().getNameAssignment_2(), "rule__EnumDecl__NameAssignment_2");
			builder.put(grammarAccess.getEnumDeclAccess().getLiteralsAssignment_4_0(), "rule__EnumDecl__LiteralsAssignment_4_0");
			builder.put(grammarAccess.getLiteralAccess().getDocAssignment_0(), "rule__Literal__DocAssignment_0");
			builder.put(grammarAccess.getLiteralAccess().getNameAssignment_1(), "rule__Literal__NameAssignment_1");
			builder.put(grammarAccess.getLiteralAccess().getValueAssignment_2_1(), "rule__Literal__ValueAssignment_2_1");
			builder.put(grammarAccess.getListTypeDeclAccess().getDocAssignment_0(), "rule__ListTypeDecl__DocAssignment_0");
			builder.put(grammarAccess.getListTypeDeclAccess().getValueTypeAssignment_3_0(), "rule__ListTypeDecl__ValueTypeAssignment_3_0");
			builder.put(grammarAccess.getListTypeDeclAccess().getPrimTypeAssignment_3_1(), "rule__ListTypeDecl__PrimTypeAssignment_3_1");
			builder.put(grammarAccess.getListTypeDeclAccess().getNameAssignment_5(), "rule__ListTypeDecl__NameAssignment_5");
			builder.put(grammarAccess.getInterfaceAccess().getDocAssignment_0(), "rule__Interface__DocAssignment_0");
			builder.put(grammarAccess.getInterfaceAccess().getAnnoAssignment_1(), "rule__Interface__AnnoAssignment_1");
			builder.put(grammarAccess.getInterfaceAccess().getNameAssignment_3(), "rule__Interface__NameAssignment_3");
			builder.put(grammarAccess.getInterfaceAccess().getParentsAssignment_4_1(), "rule__Interface__ParentsAssignment_4_1");
			builder.put(grammarAccess.getInterfaceAccess().getParentsAssignment_4_2_1(), "rule__Interface__ParentsAssignment_4_2_1");
			builder.put(grammarAccess.getInterfaceAccess().getMethodsAssignment_6_0(), "rule__Interface__MethodsAssignment_6_0");
			builder.put(grammarAccess.getMethodAccess().getDocAssignment_0(), "rule__Method__DocAssignment_0");
			builder.put(grammarAccess.getMethodAccess().getReturnProxyTypeAssignment_1_0_0(), "rule__Method__ReturnProxyTypeAssignment_1_0_0");
			builder.put(grammarAccess.getMethodAccess().getComplexTypeAssignment_1_1_0(), "rule__Method__ComplexTypeAssignment_1_1_0");
			builder.put(grammarAccess.getMethodAccess().getPrimTypeAssignment_1_1_1(), "rule__Method__PrimTypeAssignment_1_1_1");
			builder.put(grammarAccess.getMethodAccess().getNameAssignment_2(), "rule__Method__NameAssignment_2");
			builder.put(grammarAccess.getMethodAccess().getParametersAssignment_4_0(), "rule__Method__ParametersAssignment_4_0");
			builder.put(grammarAccess.getMethodAccess().getParametersAssignment_4_1_1(), "rule__Method__ParametersAssignment_4_1_1");
			builder.put(grammarAccess.getMethodAccess().getExceptionsAssignment_6_1(), "rule__Method__ExceptionsAssignment_6_1");
			builder.put(grammarAccess.getMethodAccess().getExceptionsAssignment_6_2_1(), "rule__Method__ExceptionsAssignment_6_2_1");
			builder.put(grammarAccess.getExceptionAccess().getNameAssignment_1(), "rule__Exception__NameAssignment_1");
			builder.put(grammarAccess.getExceptionAccess().getMemberAssignment_3_0(), "rule__Exception__MemberAssignment_3_0");
			builder.put(grammarAccess.getParameterAccess().getComplexTypeAssignment_0_0(), "rule__Parameter__ComplexTypeAssignment_0_0");
			builder.put(grammarAccess.getParameterAccess().getPrimTypeAssignment_0_1(), "rule__Parameter__PrimTypeAssignment_0_1");
			builder.put(grammarAccess.getParameterAccess().getProxyTypeAssignment_0_2_0(), "rule__Parameter__ProxyTypeAssignment_0_2_0");
			builder.put(grammarAccess.getParameterAccess().getNameAssignment_1(), "rule__Parameter__NameAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MORAGrammarAccess grammarAccess;

	@Override
	protected InternalMORAParser createParser() {
		InternalMORAParser result = new InternalMORAParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_SL_COMMENT" };
	}

	public MORAGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MORAGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
