/*
 * generated by Xtext 2.19.0
 */
package de.sos.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MORAGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.MORA.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIncludesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIncludesIncludeParserRuleCall_0_0 = (RuleCall)cIncludesAssignment_0.eContents().get(0);
		private final Assignment cOptionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOptionsOptionsParserRuleCall_1_0 = (RuleCall)cOptionsAssignment_1.eContents().get(0);
		private final Keyword cPackageKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Alternatives cAlternatives_5_0 = (Alternatives)cGroup_5.eContents().get(0);
		private final Assignment cInterfacesAssignment_5_0_0 = (Assignment)cAlternatives_5_0.eContents().get(0);
		private final RuleCall cInterfacesInterfaceParserRuleCall_5_0_0_0 = (RuleCall)cInterfacesAssignment_5_0_0.eContents().get(0);
		private final Assignment cTypesAssignment_5_0_1 = (Assignment)cAlternatives_5_0.eContents().get(1);
		private final RuleCall cTypesTypeDeclParserRuleCall_5_0_1_0 = (RuleCall)cTypesAssignment_5_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Model:
		//	includes+=Include*
		//	options=Options?
		//	'package' name=ID '{' ((interfaces+=Interface | types+=TypeDecl) ';'?)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//includes+=Include* options=Options? 'package' name=ID '{' ((interfaces+=Interface | types+=TypeDecl) ';'?)* '}'
		public Group getGroup() { return cGroup; }
		
		//includes+=Include*
		public Assignment getIncludesAssignment_0() { return cIncludesAssignment_0; }
		
		//Include
		public RuleCall getIncludesIncludeParserRuleCall_0_0() { return cIncludesIncludeParserRuleCall_0_0; }
		
		//options=Options?
		public Assignment getOptionsAssignment_1() { return cOptionsAssignment_1; }
		
		//Options
		public RuleCall getOptionsOptionsParserRuleCall_1_0() { return cOptionsOptionsParserRuleCall_1_0; }
		
		//'package'
		public Keyword getPackageKeyword_2() { return cPackageKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//((interfaces+=Interface | types+=TypeDecl) ';'?)*
		public Group getGroup_5() { return cGroup_5; }
		
		//(interfaces+=Interface | types+=TypeDecl)
		public Alternatives getAlternatives_5_0() { return cAlternatives_5_0; }
		
		//interfaces+=Interface
		public Assignment getInterfacesAssignment_5_0_0() { return cInterfacesAssignment_5_0_0; }
		
		//Interface
		public RuleCall getInterfacesInterfaceParserRuleCall_5_0_0_0() { return cInterfacesInterfaceParserRuleCall_5_0_0_0; }
		
		//types+=TypeDecl
		public Assignment getTypesAssignment_5_0_1() { return cTypesAssignment_5_0_1; }
		
		//TypeDecl
		public RuleCall getTypesTypeDeclParserRuleCall_5_0_1_0() { return cTypesTypeDeclParserRuleCall_5_0_1_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_5_1() { return cSemicolonKeyword_5_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class IncludeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.MORA.Include");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportUriAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportUriSTRINGTerminalRuleCall_1_0 = (RuleCall)cImportUriAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Include:
		//	'import' importUri=STRING ';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' importUri=STRING ';'?
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//importUri=STRING
		public Assignment getImportUriAssignment_1() { return cImportUriAssignment_1; }
		
		//STRING
		public RuleCall getImportUriSTRINGTerminalRuleCall_1_0() { return cImportUriSTRINGTerminalRuleCall_1_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class OptionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.MORA.Options");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOptionsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cJavaOptionsAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cJavaOptionsJavaOptionsParserRuleCall_2_0_0 = (RuleCall)cJavaOptionsAssignment_2_0.eContents().get(0);
		private final Assignment cCsOptionsAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cCsOptionsCSharpOptionsParserRuleCall_2_1_0 = (RuleCall)cCsOptionsAssignment_2_1.eContents().get(0);
		private final Assignment cCppOptionsAssignment_2_2 = (Assignment)cAlternatives_2.eContents().get(2);
		private final RuleCall cCppOptionsCppOptionsParserRuleCall_2_2_0 = (RuleCall)cCppOptionsAssignment_2_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Options:
		//	'options' '{' (javaOptions=JavaOptions | csOptions=CSharpOptions | cppOptions=CppOptions)+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'options' '{' (javaOptions=JavaOptions | csOptions=CSharpOptions | cppOptions=CppOptions)+ '}'
		public Group getGroup() { return cGroup; }
		
		//'options'
		public Keyword getOptionsKeyword_0() { return cOptionsKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(javaOptions=JavaOptions | csOptions=CSharpOptions | cppOptions=CppOptions)+
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//javaOptions=JavaOptions
		public Assignment getJavaOptionsAssignment_2_0() { return cJavaOptionsAssignment_2_0; }
		
		//JavaOptions
		public RuleCall getJavaOptionsJavaOptionsParserRuleCall_2_0_0() { return cJavaOptionsJavaOptionsParserRuleCall_2_0_0; }
		
		//csOptions=CSharpOptions
		public Assignment getCsOptionsAssignment_2_1() { return cCsOptionsAssignment_2_1; }
		
		//CSharpOptions
		public RuleCall getCsOptionsCSharpOptionsParserRuleCall_2_1_0() { return cCsOptionsCSharpOptionsParserRuleCall_2_1_0; }
		
		//cppOptions=CppOptions
		public Assignment getCppOptionsAssignment_2_2() { return cCppOptionsAssignment_2_2; }
		
		//CppOptions
		public RuleCall getCppOptionsCppOptionsParserRuleCall_2_2_0() { return cCppOptionsCppOptionsParserRuleCall_2_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class JavaOptionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.MORA.JavaOptions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cJavaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cBasePackageKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBasePackageAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBasePackageQualifiedNameParserRuleCall_4_0 = (RuleCall)cBasePackageAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//JavaOptions:
		//	'java' '{'
		//	'base-package' '=' basePackage=QualifiedName
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'java' '{' 'base-package' '=' basePackage=QualifiedName '}'
		public Group getGroup() { return cGroup; }
		
		//'java'
		public Keyword getJavaKeyword_0() { return cJavaKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'base-package'
		public Keyword getBasePackageKeyword_2() { return cBasePackageKeyword_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//basePackage=QualifiedName
		public Assignment getBasePackageAssignment_4() { return cBasePackageAssignment_4; }
		
		//QualifiedName
		public RuleCall getBasePackageQualifiedNameParserRuleCall_4_0() { return cBasePackageQualifiedNameParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class CSharpOptionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.MORA.CSharpOptions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCsharpKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cBaseNamespaceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBaseNamespaceAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBaseNamespaceQualifiedNameParserRuleCall_4_0 = (RuleCall)cBaseNamespaceAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//CSharpOptions:
		//	'csharp' '{'
		//	'base-namespace' '=' baseNamespace=QualifiedName
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'csharp' '{' 'base-namespace' '=' baseNamespace=QualifiedName '}'
		public Group getGroup() { return cGroup; }
		
		//'csharp'
		public Keyword getCsharpKeyword_0() { return cCsharpKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'base-namespace'
		public Keyword getBaseNamespaceKeyword_2() { return cBaseNamespaceKeyword_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//baseNamespace=QualifiedName
		public Assignment getBaseNamespaceAssignment_4() { return cBaseNamespaceAssignment_4; }
		
		//QualifiedName
		public RuleCall getBaseNamespaceQualifiedNameParserRuleCall_4_0() { return cBaseNamespaceQualifiedNameParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class CppOptionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.MORA.CppOptions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCppKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cBaseNamespaceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBaseNamespaceAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBaseNamespaceQualifiedNameParserRuleCall_4_0 = (RuleCall)cBaseNamespaceAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//CppOptions:
		//	'cpp' '{'
		//	'base-namespace' '=' baseNamespace=QualifiedName
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'cpp' '{' 'base-namespace' '=' baseNamespace=QualifiedName '}'
		public Group getGroup() { return cGroup; }
		
		//'cpp'
		public Keyword getCppKeyword_0() { return cCppKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'base-namespace'
		public Keyword getBaseNamespaceKeyword_2() { return cBaseNamespaceKeyword_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//baseNamespace=QualifiedName
		public Assignment getBaseNamespaceAssignment_4() { return cBaseNamespaceAssignment_4; }
		
		//QualifiedName
		public RuleCall getBaseNamespaceQualifiedNameParserRuleCall_4_0() { return cBaseNamespaceQualifiedNameParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class TypeDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.MORA.TypeDecl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSingleTypeDeclParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cListTypeDeclParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TypeDecl:
		//	SingleTypeDecl | ListTypeDecl;
		@Override public ParserRule getRule() { return rule; }
		
		//SingleTypeDecl | ListTypeDecl
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SingleTypeDecl
		public RuleCall getSingleTypeDeclParserRuleCall_0() { return cSingleTypeDeclParserRuleCall_0; }
		
		//ListTypeDecl
		public RuleCall getListTypeDeclParserRuleCall_1() { return cListTypeDeclParserRuleCall_1; }
	}
	public class SingleTypeDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.MORA.SingleTypeDecl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimTypeDeclParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStructDeclParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEnumDeclParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//SingleTypeDecl:
		//	PrimTypeDecl | StructDecl | EnumDecl;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimTypeDecl | StructDecl | EnumDecl
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PrimTypeDecl
		public RuleCall getPrimTypeDeclParserRuleCall_0() { return cPrimTypeDeclParserRuleCall_0; }
		
		//StructDecl
		public RuleCall getStructDeclParserRuleCall_1() { return cStructDeclParserRuleCall_1; }
		
		//EnumDecl
		public RuleCall getEnumDeclParserRuleCall_2() { return cEnumDeclParserRuleCall_2; }
	}
	public class PrimTypeDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.MORA.PrimTypeDecl");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNamePrimTypeLiteralEnumRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//PrimTypeDecl:
		//	name=PrimTypeLiteral;
		@Override public ParserRule getRule() { return rule; }
		
		//name=PrimTypeLiteral
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//PrimTypeLiteral
		public RuleCall getNamePrimTypeLiteralEnumRuleCall_0() { return cNamePrimTypeLiteralEnumRuleCall_0; }
	}
	public class AnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.MORA.Annotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		
		//Annotation:
		//	'@' name=ID ('=' value=STRING)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'@' name=ID ('=' value=STRING)?
		public Group getGroup() { return cGroup; }
		
		//'@'
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('=' value=STRING)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }
		
		//value=STRING
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_1_0() { return cValueSTRINGTerminalRuleCall_2_1_0; }
	}
	public class StructDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.MORA.StructDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDocAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDocML_COMMENTTerminalRuleCall_0_0 = (RuleCall)cDocAssignment_0.eContents().get(0);
		private final Assignment cAnnoAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnoAnnotationParserRuleCall_1_0 = (RuleCall)cAnnoAssignment_1.eContents().get(0);
		private final Keyword cStructKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cMemberAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cMemberMemberParserRuleCall_5_0_0 = (RuleCall)cMemberAssignment_5_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//StructDecl:
		//	doc=ML_COMMENT?
		//	anno+=Annotation*
		//	'struct' name=ID '{' (member+=Member ';'?)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//doc=ML_COMMENT? anno+=Annotation* 'struct' name=ID '{' (member+=Member ';'?)* '}'
		public Group getGroup() { return cGroup; }
		
		//doc=ML_COMMENT?
		public Assignment getDocAssignment_0() { return cDocAssignment_0; }
		
		//ML_COMMENT
		public RuleCall getDocML_COMMENTTerminalRuleCall_0_0() { return cDocML_COMMENTTerminalRuleCall_0_0; }
		
		//anno+=Annotation*
		public Assignment getAnnoAssignment_1() { return cAnnoAssignment_1; }
		
		//Annotation
		public RuleCall getAnnoAnnotationParserRuleCall_1_0() { return cAnnoAnnotationParserRuleCall_1_0; }
		
		//'struct'
		public Keyword getStructKeyword_2() { return cStructKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//(member+=Member ';'?)*
		public Group getGroup_5() { return cGroup_5; }
		
		//member+=Member
		public Assignment getMemberAssignment_5_0() { return cMemberAssignment_5_0; }
		
		//Member
		public RuleCall getMemberMemberParserRuleCall_5_0_0() { return cMemberMemberParserRuleCall_5_0_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_5_1() { return cSemicolonKeyword_5_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class MemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.MORA.Member");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDocAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDocML_COMMENTTerminalRuleCall_0_0 = (RuleCall)cDocAssignment_0.eContents().get(0);
		private final Assignment cAnnoAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnoAnnotationParserRuleCall_1_0 = (RuleCall)cAnnoAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cComplexTypeAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final CrossReference cComplexTypeTypeDeclCrossReference_2_0_0 = (CrossReference)cComplexTypeAssignment_2_0.eContents().get(0);
		private final RuleCall cComplexTypeTypeDeclQualifiedNameParserRuleCall_2_0_0_1 = (RuleCall)cComplexTypeTypeDeclCrossReference_2_0_0.eContents().get(1);
		private final Assignment cPrimTypeAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cPrimTypePrimTypeLiteralEnumRuleCall_2_1_0 = (RuleCall)cPrimTypeAssignment_2_1.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		
		//Member:
		//	doc=ML_COMMENT?
		//	anno+=Annotation* (complexType=[TypeDecl|QualifiedName] | primType=PrimTypeLiteral) name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//doc=ML_COMMENT? anno+=Annotation* (complexType=[TypeDecl|QualifiedName] | primType=PrimTypeLiteral) name=ID
		public Group getGroup() { return cGroup; }
		
		//doc=ML_COMMENT?
		public Assignment getDocAssignment_0() { return cDocAssignment_0; }
		
		//ML_COMMENT
		public RuleCall getDocML_COMMENTTerminalRuleCall_0_0() { return cDocML_COMMENTTerminalRuleCall_0_0; }
		
		//anno+=Annotation*
		public Assignment getAnnoAssignment_1() { return cAnnoAssignment_1; }
		
		//Annotation
		public RuleCall getAnnoAnnotationParserRuleCall_1_0() { return cAnnoAnnotationParserRuleCall_1_0; }
		
		//(complexType=[TypeDecl|QualifiedName] | primType=PrimTypeLiteral)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//complexType=[TypeDecl|QualifiedName]
		public Assignment getComplexTypeAssignment_2_0() { return cComplexTypeAssignment_2_0; }
		
		//[TypeDecl|QualifiedName]
		public CrossReference getComplexTypeTypeDeclCrossReference_2_0_0() { return cComplexTypeTypeDeclCrossReference_2_0_0; }
		
		//QualifiedName
		public RuleCall getComplexTypeTypeDeclQualifiedNameParserRuleCall_2_0_0_1() { return cComplexTypeTypeDeclQualifiedNameParserRuleCall_2_0_0_1; }
		
		//primType=PrimTypeLiteral
		public Assignment getPrimTypeAssignment_2_1() { return cPrimTypeAssignment_2_1; }
		
		//PrimTypeLiteral
		public RuleCall getPrimTypePrimTypeLiteralEnumRuleCall_2_1_0() { return cPrimTypePrimTypeLiteralEnumRuleCall_2_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
	}
	public class EnumDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.MORA.EnumDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDocAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDocML_COMMENTTerminalRuleCall_0_0 = (RuleCall)cDocAssignment_0.eContents().get(0);
		private final Keyword cEnumKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cLiteralsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cLiteralsLiteralParserRuleCall_4_0_0 = (RuleCall)cLiteralsAssignment_4_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//EnumDecl:
		//	doc=ML_COMMENT?
		//	'enum' name=ID '{' (literals+=Literal ';'?)+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//doc=ML_COMMENT? 'enum' name=ID '{' (literals+=Literal ';'?)+ '}'
		public Group getGroup() { return cGroup; }
		
		//doc=ML_COMMENT?
		public Assignment getDocAssignment_0() { return cDocAssignment_0; }
		
		//ML_COMMENT
		public RuleCall getDocML_COMMENTTerminalRuleCall_0_0() { return cDocML_COMMENTTerminalRuleCall_0_0; }
		
		//'enum'
		public Keyword getEnumKeyword_1() { return cEnumKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//(literals+=Literal ';'?)+
		public Group getGroup_4() { return cGroup_4; }
		
		//literals+=Literal
		public Assignment getLiteralsAssignment_4_0() { return cLiteralsAssignment_4_0; }
		
		//Literal
		public RuleCall getLiteralsLiteralParserRuleCall_4_0_0() { return cLiteralsLiteralParserRuleCall_4_0_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_4_1() { return cSemicolonKeyword_4_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.MORA.Literal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDocAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDocML_COMMENTTerminalRuleCall_0_0 = (RuleCall)cDocAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		
		//Literal:
		//	doc=ML_COMMENT?
		//	name=ID ('=' value=INT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//doc=ML_COMMENT? name=ID ('=' value=INT)?
		public Group getGroup() { return cGroup; }
		
		//doc=ML_COMMENT?
		public Assignment getDocAssignment_0() { return cDocAssignment_0; }
		
		//ML_COMMENT
		public RuleCall getDocML_COMMENTTerminalRuleCall_0_0() { return cDocML_COMMENTTerminalRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('=' value=INT)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }
		
		//value=INT
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_2_1_0() { return cValueINTTerminalRuleCall_2_1_0; }
	}
	public class ListTypeDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.MORA.ListTypeDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDocAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDocML_COMMENTTerminalRuleCall_0_0 = (RuleCall)cDocAssignment_0.eContents().get(0);
		private final Keyword cListKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLessThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cValueTypeAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final CrossReference cValueTypeSingleTypeDeclCrossReference_3_0_0 = (CrossReference)cValueTypeAssignment_3_0.eContents().get(0);
		private final RuleCall cValueTypeSingleTypeDeclQualifiedNameParserRuleCall_3_0_0_1 = (RuleCall)cValueTypeSingleTypeDeclCrossReference_3_0_0.eContents().get(1);
		private final Assignment cPrimTypeAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cPrimTypePrimTypeLiteralEnumRuleCall_3_1_0 = (RuleCall)cPrimTypeAssignment_3_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNameIDTerminalRuleCall_5_0 = (RuleCall)cNameAssignment_5.eContents().get(0);
		
		////CollectionTypeDecl:
		////	ListTypeDecl | SetTypeDecl | MapTypeDecl
		////;
		////
		////SetTypeDecl :
		////	'Set''<' valueType=[SingleTypeDecl|QualifiedName] '>' name = ID
		////;
		////MapTypeDecl:
		////	'Map''<'keyType=[SingleTypeDecl|QualifiedName] ',' valueType=[SingleTypeDecl|QualifiedName] '>' name = ID
		////;
		//ListTypeDecl:
		//	doc=ML_COMMENT?
		//	'List' '<' (valueType=[SingleTypeDecl|QualifiedName] | primType=PrimTypeLiteral) '>' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//doc=ML_COMMENT? 'List' '<' (valueType=[SingleTypeDecl|QualifiedName] | primType=PrimTypeLiteral) '>' name=ID
		public Group getGroup() { return cGroup; }
		
		//doc=ML_COMMENT?
		public Assignment getDocAssignment_0() { return cDocAssignment_0; }
		
		//ML_COMMENT
		public RuleCall getDocML_COMMENTTerminalRuleCall_0_0() { return cDocML_COMMENTTerminalRuleCall_0_0; }
		
		//'List'
		public Keyword getListKeyword_1() { return cListKeyword_1; }
		
		//'<'
		public Keyword getLessThanSignKeyword_2() { return cLessThanSignKeyword_2; }
		
		//(valueType=[SingleTypeDecl|QualifiedName] | primType=PrimTypeLiteral)
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//valueType=[SingleTypeDecl|QualifiedName]
		public Assignment getValueTypeAssignment_3_0() { return cValueTypeAssignment_3_0; }
		
		//[SingleTypeDecl|QualifiedName]
		public CrossReference getValueTypeSingleTypeDeclCrossReference_3_0_0() { return cValueTypeSingleTypeDeclCrossReference_3_0_0; }
		
		//QualifiedName
		public RuleCall getValueTypeSingleTypeDeclQualifiedNameParserRuleCall_3_0_0_1() { return cValueTypeSingleTypeDeclQualifiedNameParserRuleCall_3_0_0_1; }
		
		//primType=PrimTypeLiteral
		public Assignment getPrimTypeAssignment_3_1() { return cPrimTypeAssignment_3_1; }
		
		//PrimTypeLiteral
		public RuleCall getPrimTypePrimTypeLiteralEnumRuleCall_3_1_0() { return cPrimTypePrimTypeLiteralEnumRuleCall_3_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_4() { return cGreaterThanSignKeyword_4; }
		
		//name=ID
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_5_0() { return cNameIDTerminalRuleCall_5_0; }
	}
	public class InterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.MORA.Interface");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDocAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDocML_COMMENTTerminalRuleCall_0_0 = (RuleCall)cDocAssignment_0.eContents().get(0);
		private final Assignment cAnnoAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnoAnnotationParserRuleCall_1_0 = (RuleCall)cAnnoAssignment_1.eContents().get(0);
		private final Keyword cInterfaceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cExtendsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cParentsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cParentsInterfaceCrossReference_4_1_0 = (CrossReference)cParentsAssignment_4_1.eContents().get(0);
		private final RuleCall cParentsInterfaceQualifiedNameParserRuleCall_4_1_0_1 = (RuleCall)cParentsInterfaceCrossReference_4_1_0.eContents().get(1);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cParentsAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final CrossReference cParentsInterfaceCrossReference_4_2_1_0 = (CrossReference)cParentsAssignment_4_2_1.eContents().get(0);
		private final RuleCall cParentsInterfaceQualifiedNameParserRuleCall_4_2_1_0_1 = (RuleCall)cParentsInterfaceCrossReference_4_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cMethodsAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cMethodsMethodParserRuleCall_6_0_0 = (RuleCall)cMethodsAssignment_6_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Interface:
		//	doc=ML_COMMENT?
		//	anno+=Annotation*
		//	'interface' name=ID ('extends' parents+=[Interface|QualifiedName] (',' parents+=[Interface|QualifiedName])*)?
		//	'{' (methods+=Method ';'?)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//doc=ML_COMMENT? anno+=Annotation* 'interface' name=ID ('extends' parents+=[Interface|QualifiedName] (','
		//parents+=[Interface|QualifiedName])*)? '{' (methods+=Method ';'?)* '}'
		public Group getGroup() { return cGroup; }
		
		//doc=ML_COMMENT?
		public Assignment getDocAssignment_0() { return cDocAssignment_0; }
		
		//ML_COMMENT
		public RuleCall getDocML_COMMENTTerminalRuleCall_0_0() { return cDocML_COMMENTTerminalRuleCall_0_0; }
		
		//anno+=Annotation*
		public Assignment getAnnoAssignment_1() { return cAnnoAssignment_1; }
		
		//Annotation
		public RuleCall getAnnoAnnotationParserRuleCall_1_0() { return cAnnoAnnotationParserRuleCall_1_0; }
		
		//'interface'
		public Keyword getInterfaceKeyword_2() { return cInterfaceKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//('extends' parents+=[Interface|QualifiedName] (',' parents+=[Interface|QualifiedName])*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'extends'
		public Keyword getExtendsKeyword_4_0() { return cExtendsKeyword_4_0; }
		
		//parents+=[Interface|QualifiedName]
		public Assignment getParentsAssignment_4_1() { return cParentsAssignment_4_1; }
		
		//[Interface|QualifiedName]
		public CrossReference getParentsInterfaceCrossReference_4_1_0() { return cParentsInterfaceCrossReference_4_1_0; }
		
		//QualifiedName
		public RuleCall getParentsInterfaceQualifiedNameParserRuleCall_4_1_0_1() { return cParentsInterfaceQualifiedNameParserRuleCall_4_1_0_1; }
		
		//(',' parents+=[Interface|QualifiedName])*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//','
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }
		
		//parents+=[Interface|QualifiedName]
		public Assignment getParentsAssignment_4_2_1() { return cParentsAssignment_4_2_1; }
		
		//[Interface|QualifiedName]
		public CrossReference getParentsInterfaceCrossReference_4_2_1_0() { return cParentsInterfaceCrossReference_4_2_1_0; }
		
		//QualifiedName
		public RuleCall getParentsInterfaceQualifiedNameParserRuleCall_4_2_1_0_1() { return cParentsInterfaceQualifiedNameParserRuleCall_4_2_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//(methods+=Method ';'?)*
		public Group getGroup_6() { return cGroup_6; }
		
		//methods+=Method
		public Assignment getMethodsAssignment_6_0() { return cMethodsAssignment_6_0; }
		
		//Method
		public RuleCall getMethodsMethodParserRuleCall_6_0_0() { return cMethodsMethodParserRuleCall_6_0_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_6_1() { return cSemicolonKeyword_6_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class MethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.MORA.Method");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDocAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDocML_COMMENTTerminalRuleCall_0_0 = (RuleCall)cDocAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cReturnProxyTypeAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final CrossReference cReturnProxyTypeInterfaceCrossReference_1_0_0_0 = (CrossReference)cReturnProxyTypeAssignment_1_0_0.eContents().get(0);
		private final RuleCall cReturnProxyTypeInterfaceIDTerminalRuleCall_1_0_0_0_1 = (RuleCall)cReturnProxyTypeInterfaceCrossReference_1_0_0_0.eContents().get(1);
		private final Keyword cAsteriskKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cAlternatives_1.eContents().get(1);
		private final Assignment cComplexTypeAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final CrossReference cComplexTypeTypeDeclCrossReference_1_1_0_0 = (CrossReference)cComplexTypeAssignment_1_1_0.eContents().get(0);
		private final RuleCall cComplexTypeTypeDeclQualifiedNameParserRuleCall_1_1_0_0_1 = (RuleCall)cComplexTypeTypeDeclCrossReference_1_1_0_0.eContents().get(1);
		private final Assignment cPrimTypeAssignment_1_1_1 = (Assignment)cAlternatives_1_1.eContents().get(1);
		private final RuleCall cPrimTypePrimTypeLiteralEnumRuleCall_1_1_1_0 = (RuleCall)cPrimTypeAssignment_1_1_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cParametersAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cParametersParameterParserRuleCall_4_0_0 = (RuleCall)cParametersAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cParametersAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_4_1_1_0 = (RuleCall)cParametersAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cThrowsKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cExceptionsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cExceptionsExceptionParserRuleCall_6_1_0 = (RuleCall)cExceptionsAssignment_6_1.eContents().get(0);
		private final Group cGroup_6_2 = (Group)cGroup_6.eContents().get(2);
		private final Keyword cCommaKeyword_6_2_0 = (Keyword)cGroup_6_2.eContents().get(0);
		private final Assignment cExceptionsAssignment_6_2_1 = (Assignment)cGroup_6_2.eContents().get(1);
		private final RuleCall cExceptionsExceptionParserRuleCall_6_2_1_0 = (RuleCall)cExceptionsAssignment_6_2_1.eContents().get(0);
		
		//Method:
		//	doc=ML_COMMENT? (returnProxyType=[Interface] '*' | (complexType=[TypeDecl|QualifiedName] | primType=PrimTypeLiteral))
		//	name=ID '(' (parameters+=Parameter (',' parameters+=Parameter)*)? ')' ('throws' exceptions+=Exception (','
		//	exceptions+=Exception)*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//doc=ML_COMMENT? (returnProxyType=[Interface] '*' | (complexType=[TypeDecl|QualifiedName] | primType=PrimTypeLiteral))
		//name=ID '(' (parameters+=Parameter (',' parameters+=Parameter)*)? ')' ('throws' exceptions+=Exception (','
		//exceptions+=Exception)*)?
		public Group getGroup() { return cGroup; }
		
		//doc=ML_COMMENT?
		public Assignment getDocAssignment_0() { return cDocAssignment_0; }
		
		//ML_COMMENT
		public RuleCall getDocML_COMMENTTerminalRuleCall_0_0() { return cDocML_COMMENTTerminalRuleCall_0_0; }
		
		//(returnProxyType=[Interface] '*' | (complexType=[TypeDecl|QualifiedName] | primType=PrimTypeLiteral))
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//returnProxyType=[Interface] '*'
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//returnProxyType=[Interface]
		public Assignment getReturnProxyTypeAssignment_1_0_0() { return cReturnProxyTypeAssignment_1_0_0; }
		
		//[Interface]
		public CrossReference getReturnProxyTypeInterfaceCrossReference_1_0_0_0() { return cReturnProxyTypeInterfaceCrossReference_1_0_0_0; }
		
		//ID
		public RuleCall getReturnProxyTypeInterfaceIDTerminalRuleCall_1_0_0_0_1() { return cReturnProxyTypeInterfaceIDTerminalRuleCall_1_0_0_0_1; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_0_1() { return cAsteriskKeyword_1_0_1; }
		
		//(complexType=[TypeDecl|QualifiedName] | primType=PrimTypeLiteral)
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//complexType=[TypeDecl|QualifiedName]
		public Assignment getComplexTypeAssignment_1_1_0() { return cComplexTypeAssignment_1_1_0; }
		
		//[TypeDecl|QualifiedName]
		public CrossReference getComplexTypeTypeDeclCrossReference_1_1_0_0() { return cComplexTypeTypeDeclCrossReference_1_1_0_0; }
		
		//QualifiedName
		public RuleCall getComplexTypeTypeDeclQualifiedNameParserRuleCall_1_1_0_0_1() { return cComplexTypeTypeDeclQualifiedNameParserRuleCall_1_1_0_0_1; }
		
		//primType=PrimTypeLiteral
		public Assignment getPrimTypeAssignment_1_1_1() { return cPrimTypeAssignment_1_1_1; }
		
		//PrimTypeLiteral
		public RuleCall getPrimTypePrimTypeLiteralEnumRuleCall_1_1_1_0() { return cPrimTypePrimTypeLiteralEnumRuleCall_1_1_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//(parameters+=Parameter (',' parameters+=Parameter)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_4_0() { return cParametersAssignment_4_0; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_4_0_0() { return cParametersParameterParserRuleCall_4_0_0; }
		
		//(',' parameters+=Parameter)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//','
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_4_1_1() { return cParametersAssignment_4_1_1; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_4_1_1_0() { return cParametersParameterParserRuleCall_4_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//('throws' exceptions+=Exception (',' exceptions+=Exception)*)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'throws'
		public Keyword getThrowsKeyword_6_0() { return cThrowsKeyword_6_0; }
		
		//exceptions+=Exception
		public Assignment getExceptionsAssignment_6_1() { return cExceptionsAssignment_6_1; }
		
		//Exception
		public RuleCall getExceptionsExceptionParserRuleCall_6_1_0() { return cExceptionsExceptionParserRuleCall_6_1_0; }
		
		//(',' exceptions+=Exception)*
		public Group getGroup_6_2() { return cGroup_6_2; }
		
		//','
		public Keyword getCommaKeyword_6_2_0() { return cCommaKeyword_6_2_0; }
		
		//exceptions+=Exception
		public Assignment getExceptionsAssignment_6_2_1() { return cExceptionsAssignment_6_2_1; }
		
		//Exception
		public RuleCall getExceptionsExceptionParserRuleCall_6_2_1_0() { return cExceptionsExceptionParserRuleCall_6_2_1_0; }
	}
	public class ExceptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.MORA.Exception");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExceptionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cMemberAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cMemberMemberParserRuleCall_3_0_0 = (RuleCall)cMemberAssignment_3_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Exception:
		//	'exception' name=ID '{' (member+=Member ';'?)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'exception' name=ID '{' (member+=Member ';'?)* '}'
		public Group getGroup() { return cGroup; }
		
		//'exception'
		public Keyword getExceptionKeyword_0() { return cExceptionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(member+=Member ';'?)*
		public Group getGroup_3() { return cGroup_3; }
		
		//member+=Member
		public Assignment getMemberAssignment_3_0() { return cMemberAssignment_3_0; }
		
		//Member
		public RuleCall getMemberMemberParserRuleCall_3_0_0() { return cMemberMemberParserRuleCall_3_0_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.MORA.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cComplexTypeAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final CrossReference cComplexTypeTypeDeclCrossReference_0_0_0 = (CrossReference)cComplexTypeAssignment_0_0.eContents().get(0);
		private final RuleCall cComplexTypeTypeDeclQualifiedNameParserRuleCall_0_0_0_1 = (RuleCall)cComplexTypeTypeDeclCrossReference_0_0_0.eContents().get(1);
		private final Assignment cPrimTypeAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cPrimTypePrimTypeLiteralEnumRuleCall_0_1_0 = (RuleCall)cPrimTypeAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cAlternatives_0.eContents().get(2);
		private final Assignment cProxyTypeAssignment_0_2_0 = (Assignment)cGroup_0_2.eContents().get(0);
		private final CrossReference cProxyTypeInterfaceCrossReference_0_2_0_0 = (CrossReference)cProxyTypeAssignment_0_2_0.eContents().get(0);
		private final RuleCall cProxyTypeInterfaceIDTerminalRuleCall_0_2_0_0_1 = (RuleCall)cProxyTypeInterfaceCrossReference_0_2_0_0.eContents().get(1);
		private final Keyword cAsteriskKeyword_0_2_1 = (Keyword)cGroup_0_2.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Parameter:
		//	(complexType=[TypeDecl|QualifiedName] | primType=PrimTypeLiteral | proxyType=[Interface] '*') name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//(complexType=[TypeDecl|QualifiedName] | primType=PrimTypeLiteral | proxyType=[Interface] '*') name=ID
		public Group getGroup() { return cGroup; }
		
		//(complexType=[TypeDecl|QualifiedName] | primType=PrimTypeLiteral | proxyType=[Interface] '*')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//complexType=[TypeDecl|QualifiedName]
		public Assignment getComplexTypeAssignment_0_0() { return cComplexTypeAssignment_0_0; }
		
		//[TypeDecl|QualifiedName]
		public CrossReference getComplexTypeTypeDeclCrossReference_0_0_0() { return cComplexTypeTypeDeclCrossReference_0_0_0; }
		
		//QualifiedName
		public RuleCall getComplexTypeTypeDeclQualifiedNameParserRuleCall_0_0_0_1() { return cComplexTypeTypeDeclQualifiedNameParserRuleCall_0_0_0_1; }
		
		//primType=PrimTypeLiteral
		public Assignment getPrimTypeAssignment_0_1() { return cPrimTypeAssignment_0_1; }
		
		//PrimTypeLiteral
		public RuleCall getPrimTypePrimTypeLiteralEnumRuleCall_0_1_0() { return cPrimTypePrimTypeLiteralEnumRuleCall_0_1_0; }
		
		//proxyType=[Interface] '*'
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//proxyType=[Interface]
		public Assignment getProxyTypeAssignment_0_2_0() { return cProxyTypeAssignment_0_2_0; }
		
		//[Interface]
		public CrossReference getProxyTypeInterfaceCrossReference_0_2_0_0() { return cProxyTypeInterfaceCrossReference_0_2_0_0; }
		
		//ID
		public RuleCall getProxyTypeInterfaceIDTerminalRuleCall_0_2_0_0_1() { return cProxyTypeInterfaceIDTerminalRuleCall_0_2_0_0_1; }
		
		//'*'
		public Keyword getAsteriskKeyword_0_2_1() { return cAsteriskKeyword_0_2_1; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.MORA.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cColonColonKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID (('.' | '::') ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID (('.' | '::') ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//(('.' | '::') ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//('.' | '::')
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0_0() { return cFullStopKeyword_1_0_0; }
		
		//'::'
		public Keyword getColonColonKeyword_1_0_1() { return cColonColonKeyword_1_0_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	public class PrimTypeLiteralElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.MORA.PrimTypeLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBOOLEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBOOLBoolKeyword_0_0 = (Keyword)cBOOLEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBYTEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBYTEByteKeyword_1_0 = (Keyword)cBYTEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSHORTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSHORTShortKeyword_2_0 = (Keyword)cSHORTEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cINTEGEREnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cINTEGERIntKeyword_3_0 = (Keyword)cINTEGEREnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cLONGEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cLONGLongKeyword_4_0 = (Keyword)cLONGEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cFLOATEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cFLOATFloatKeyword_5_0 = (Keyword)cFLOATEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cDOUBLEEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cDOUBLEDoubleKeyword_6_0 = (Keyword)cDOUBLEEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cSTRINGEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cSTRINGStringKeyword_7_0 = (Keyword)cSTRINGEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cVOIDEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cVOIDVoidKeyword_8_0 = (Keyword)cVOIDEnumLiteralDeclaration_8.eContents().get(0);
		
		//enum PrimTypeLiteral:
		//	BOOL='bool' |
		//	BYTE='byte' |
		//	SHORT='short' |
		//	INTEGER='int' |
		//	LONG='long' |
		//	FLOAT='float' |
		//	DOUBLE='double' |
		//	STRING='string' |
		//	VOID='void';
		public EnumRule getRule() { return rule; }
		
		//BOOL='bool' | BYTE='byte' | SHORT='short' | INTEGER='int' | LONG='long' | FLOAT='float' | DOUBLE='double' |
		//STRING='string' | VOID='void'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BOOL='bool'
		public EnumLiteralDeclaration getBOOLEnumLiteralDeclaration_0() { return cBOOLEnumLiteralDeclaration_0; }
		
		//'bool'
		public Keyword getBOOLBoolKeyword_0_0() { return cBOOLBoolKeyword_0_0; }
		
		//BYTE='byte'
		public EnumLiteralDeclaration getBYTEEnumLiteralDeclaration_1() { return cBYTEEnumLiteralDeclaration_1; }
		
		//'byte'
		public Keyword getBYTEByteKeyword_1_0() { return cBYTEByteKeyword_1_0; }
		
		//SHORT='short'
		public EnumLiteralDeclaration getSHORTEnumLiteralDeclaration_2() { return cSHORTEnumLiteralDeclaration_2; }
		
		//'short'
		public Keyword getSHORTShortKeyword_2_0() { return cSHORTShortKeyword_2_0; }
		
		//INTEGER='int'
		public EnumLiteralDeclaration getINTEGEREnumLiteralDeclaration_3() { return cINTEGEREnumLiteralDeclaration_3; }
		
		//'int'
		public Keyword getINTEGERIntKeyword_3_0() { return cINTEGERIntKeyword_3_0; }
		
		//LONG='long'
		public EnumLiteralDeclaration getLONGEnumLiteralDeclaration_4() { return cLONGEnumLiteralDeclaration_4; }
		
		//'long'
		public Keyword getLONGLongKeyword_4_0() { return cLONGLongKeyword_4_0; }
		
		//FLOAT='float'
		public EnumLiteralDeclaration getFLOATEnumLiteralDeclaration_5() { return cFLOATEnumLiteralDeclaration_5; }
		
		//'float'
		public Keyword getFLOATFloatKeyword_5_0() { return cFLOATFloatKeyword_5_0; }
		
		//DOUBLE='double'
		public EnumLiteralDeclaration getDOUBLEEnumLiteralDeclaration_6() { return cDOUBLEEnumLiteralDeclaration_6; }
		
		//'double'
		public Keyword getDOUBLEDoubleKeyword_6_0() { return cDOUBLEDoubleKeyword_6_0; }
		
		//STRING='string'
		public EnumLiteralDeclaration getSTRINGEnumLiteralDeclaration_7() { return cSTRINGEnumLiteralDeclaration_7; }
		
		//'string'
		public Keyword getSTRINGStringKeyword_7_0() { return cSTRINGStringKeyword_7_0; }
		
		//VOID='void'
		public EnumLiteralDeclaration getVOIDEnumLiteralDeclaration_8() { return cVOIDEnumLiteralDeclaration_8; }
		
		//'void'
		public Keyword getVOIDVoidKeyword_8_0() { return cVOIDVoidKeyword_8_0; }
	}
	
	private final ModelElements pModel;
	private final IncludeElements pInclude;
	private final OptionsElements pOptions;
	private final JavaOptionsElements pJavaOptions;
	private final CSharpOptionsElements pCSharpOptions;
	private final CppOptionsElements pCppOptions;
	private final TypeDeclElements pTypeDecl;
	private final SingleTypeDeclElements pSingleTypeDecl;
	private final PrimTypeDeclElements pPrimTypeDecl;
	private final AnnotationElements pAnnotation;
	private final StructDeclElements pStructDecl;
	private final MemberElements pMember;
	private final EnumDeclElements pEnumDecl;
	private final LiteralElements pLiteral;
	private final ListTypeDeclElements pListTypeDecl;
	private final InterfaceElements pInterface;
	private final MethodElements pMethod;
	private final ExceptionElements pException;
	private final ParameterElements pParameter;
	private final PrimTypeLiteralElements ePrimTypeLiteral;
	private final QualifiedNameElements pQualifiedName;
	private final TerminalRule tID;
	private final TerminalRule tINT;
	private final TerminalRule tSTRING;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tWS;
	private final TerminalRule tANY_OTHER;
	
	private final Grammar grammar;

	@Inject
	public MORAGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pModel = new ModelElements();
		this.pInclude = new IncludeElements();
		this.pOptions = new OptionsElements();
		this.pJavaOptions = new JavaOptionsElements();
		this.pCSharpOptions = new CSharpOptionsElements();
		this.pCppOptions = new CppOptionsElements();
		this.pTypeDecl = new TypeDeclElements();
		this.pSingleTypeDecl = new SingleTypeDeclElements();
		this.pPrimTypeDecl = new PrimTypeDeclElements();
		this.pAnnotation = new AnnotationElements();
		this.pStructDecl = new StructDeclElements();
		this.pMember = new MemberElements();
		this.pEnumDecl = new EnumDeclElements();
		this.pLiteral = new LiteralElements();
		this.pListTypeDecl = new ListTypeDeclElements();
		this.pInterface = new InterfaceElements();
		this.pMethod = new MethodElements();
		this.pException = new ExceptionElements();
		this.pParameter = new ParameterElements();
		this.ePrimTypeLiteral = new PrimTypeLiteralElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.MORA.ID");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.MORA.INT");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.MORA.STRING");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.MORA.ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.MORA.SL_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.MORA.WS");
		this.tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.MORA.ANY_OTHER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.sos.MORA".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Model:
	//	includes+=Include*
	//	options=Options?
	//	'package' name=ID '{' ((interfaces+=Interface | types+=TypeDecl) ';'?)*
	//	'}';
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Include:
	//	'import' importUri=STRING ';'?;
	public IncludeElements getIncludeAccess() {
		return pInclude;
	}
	
	public ParserRule getIncludeRule() {
		return getIncludeAccess().getRule();
	}
	
	//Options:
	//	'options' '{' (javaOptions=JavaOptions | csOptions=CSharpOptions | cppOptions=CppOptions)+
	//	'}';
	public OptionsElements getOptionsAccess() {
		return pOptions;
	}
	
	public ParserRule getOptionsRule() {
		return getOptionsAccess().getRule();
	}
	
	//JavaOptions:
	//	'java' '{'
	//	'base-package' '=' basePackage=QualifiedName
	//	'}';
	public JavaOptionsElements getJavaOptionsAccess() {
		return pJavaOptions;
	}
	
	public ParserRule getJavaOptionsRule() {
		return getJavaOptionsAccess().getRule();
	}
	
	//CSharpOptions:
	//	'csharp' '{'
	//	'base-namespace' '=' baseNamespace=QualifiedName
	//	'}';
	public CSharpOptionsElements getCSharpOptionsAccess() {
		return pCSharpOptions;
	}
	
	public ParserRule getCSharpOptionsRule() {
		return getCSharpOptionsAccess().getRule();
	}
	
	//CppOptions:
	//	'cpp' '{'
	//	'base-namespace' '=' baseNamespace=QualifiedName
	//	'}';
	public CppOptionsElements getCppOptionsAccess() {
		return pCppOptions;
	}
	
	public ParserRule getCppOptionsRule() {
		return getCppOptionsAccess().getRule();
	}
	
	//TypeDecl:
	//	SingleTypeDecl | ListTypeDecl;
	public TypeDeclElements getTypeDeclAccess() {
		return pTypeDecl;
	}
	
	public ParserRule getTypeDeclRule() {
		return getTypeDeclAccess().getRule();
	}
	
	//SingleTypeDecl:
	//	PrimTypeDecl | StructDecl | EnumDecl;
	public SingleTypeDeclElements getSingleTypeDeclAccess() {
		return pSingleTypeDecl;
	}
	
	public ParserRule getSingleTypeDeclRule() {
		return getSingleTypeDeclAccess().getRule();
	}
	
	//PrimTypeDecl:
	//	name=PrimTypeLiteral;
	public PrimTypeDeclElements getPrimTypeDeclAccess() {
		return pPrimTypeDecl;
	}
	
	public ParserRule getPrimTypeDeclRule() {
		return getPrimTypeDeclAccess().getRule();
	}
	
	//Annotation:
	//	'@' name=ID ('=' value=STRING)?;
	public AnnotationElements getAnnotationAccess() {
		return pAnnotation;
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}
	
	//StructDecl:
	//	doc=ML_COMMENT?
	//	anno+=Annotation*
	//	'struct' name=ID '{' (member+=Member ';'?)*
	//	'}';
	public StructDeclElements getStructDeclAccess() {
		return pStructDecl;
	}
	
	public ParserRule getStructDeclRule() {
		return getStructDeclAccess().getRule();
	}
	
	//Member:
	//	doc=ML_COMMENT?
	//	anno+=Annotation* (complexType=[TypeDecl|QualifiedName] | primType=PrimTypeLiteral) name=ID;
	public MemberElements getMemberAccess() {
		return pMember;
	}
	
	public ParserRule getMemberRule() {
		return getMemberAccess().getRule();
	}
	
	//EnumDecl:
	//	doc=ML_COMMENT?
	//	'enum' name=ID '{' (literals+=Literal ';'?)+
	//	'}';
	public EnumDeclElements getEnumDeclAccess() {
		return pEnumDecl;
	}
	
	public ParserRule getEnumDeclRule() {
		return getEnumDeclAccess().getRule();
	}
	
	//Literal:
	//	doc=ML_COMMENT?
	//	name=ID ('=' value=INT)?;
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
	
	////CollectionTypeDecl:
	////	ListTypeDecl | SetTypeDecl | MapTypeDecl
	////;
	////
	////SetTypeDecl :
	////	'Set''<' valueType=[SingleTypeDecl|QualifiedName] '>' name = ID
	////;
	////MapTypeDecl:
	////	'Map''<'keyType=[SingleTypeDecl|QualifiedName] ',' valueType=[SingleTypeDecl|QualifiedName] '>' name = ID
	////;
	//ListTypeDecl:
	//	doc=ML_COMMENT?
	//	'List' '<' (valueType=[SingleTypeDecl|QualifiedName] | primType=PrimTypeLiteral) '>' name=ID;
	public ListTypeDeclElements getListTypeDeclAccess() {
		return pListTypeDecl;
	}
	
	public ParserRule getListTypeDeclRule() {
		return getListTypeDeclAccess().getRule();
	}
	
	//Interface:
	//	doc=ML_COMMENT?
	//	anno+=Annotation*
	//	'interface' name=ID ('extends' parents+=[Interface|QualifiedName] (',' parents+=[Interface|QualifiedName])*)?
	//	'{' (methods+=Method ';'?)*
	//	'}';
	public InterfaceElements getInterfaceAccess() {
		return pInterface;
	}
	
	public ParserRule getInterfaceRule() {
		return getInterfaceAccess().getRule();
	}
	
	//Method:
	//	doc=ML_COMMENT? (returnProxyType=[Interface] '*' | (complexType=[TypeDecl|QualifiedName] | primType=PrimTypeLiteral))
	//	name=ID '(' (parameters+=Parameter (',' parameters+=Parameter)*)? ')' ('throws' exceptions+=Exception (','
	//	exceptions+=Exception)*)?;
	public MethodElements getMethodAccess() {
		return pMethod;
	}
	
	public ParserRule getMethodRule() {
		return getMethodAccess().getRule();
	}
	
	//Exception:
	//	'exception' name=ID '{' (member+=Member ';'?)*
	//	'}';
	public ExceptionElements getExceptionAccess() {
		return pException;
	}
	
	public ParserRule getExceptionRule() {
		return getExceptionAccess().getRule();
	}
	
	//Parameter:
	//	(complexType=[TypeDecl|QualifiedName] | primType=PrimTypeLiteral | proxyType=[Interface] '*') name=ID;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//enum PrimTypeLiteral:
	//	BOOL='bool' |
	//	BYTE='byte' |
	//	SHORT='short' |
	//	INTEGER='int' |
	//	LONG='long' |
	//	FLOAT='float' |
	//	DOUBLE='double' |
	//	STRING='string' |
	//	VOID='void';
	public PrimTypeLiteralElements getPrimTypeLiteralAccess() {
		return ePrimTypeLiteral;
	}
	
	public EnumRule getPrimTypeLiteralRule() {
		return getPrimTypeLiteralAccess().getRule();
	}
	
	//QualifiedName:
	//	ID (('.' | '::') ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return tINT;
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return tANY_OTHER;
	}
}
