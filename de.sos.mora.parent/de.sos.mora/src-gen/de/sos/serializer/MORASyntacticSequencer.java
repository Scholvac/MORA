/*
 * generated by Xtext 2.19.0
 */
package de.sos.serializer;

import com.google.inject.Inject;
import de.sos.services.MORAGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class MORASyntacticSequencer extends AbstractSyntacticSequencer {

	protected MORAGrammarAccess grammarAccess;
	protected AbstractElementAlias match_EnumDecl_SemicolonKeyword_4_1_q;
	protected AbstractElementAlias match_Exception_SemicolonKeyword_3_1_q;
	protected AbstractElementAlias match_Include_SemicolonKeyword_2_q;
	protected AbstractElementAlias match_Interface_SemicolonKeyword_6_1_q;
	protected AbstractElementAlias match_Model_SemicolonKeyword_5_1_q;
	protected AbstractElementAlias match_StructDecl_SemicolonKeyword_5_1_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (MORAGrammarAccess) access;
		match_EnumDecl_SemicolonKeyword_4_1_q = new TokenAlias(false, true, grammarAccess.getEnumDeclAccess().getSemicolonKeyword_4_1());
		match_Exception_SemicolonKeyword_3_1_q = new TokenAlias(false, true, grammarAccess.getExceptionAccess().getSemicolonKeyword_3_1());
		match_Include_SemicolonKeyword_2_q = new TokenAlias(false, true, grammarAccess.getIncludeAccess().getSemicolonKeyword_2());
		match_Interface_SemicolonKeyword_6_1_q = new TokenAlias(false, true, grammarAccess.getInterfaceAccess().getSemicolonKeyword_6_1());
		match_Model_SemicolonKeyword_5_1_q = new TokenAlias(false, true, grammarAccess.getModelAccess().getSemicolonKeyword_5_1());
		match_StructDecl_SemicolonKeyword_5_1_q = new TokenAlias(false, true, grammarAccess.getStructDeclAccess().getSemicolonKeyword_5_1());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_EnumDecl_SemicolonKeyword_4_1_q.equals(syntax))
				emit_EnumDecl_SemicolonKeyword_4_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Exception_SemicolonKeyword_3_1_q.equals(syntax))
				emit_Exception_SemicolonKeyword_3_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Include_SemicolonKeyword_2_q.equals(syntax))
				emit_Include_SemicolonKeyword_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Interface_SemicolonKeyword_6_1_q.equals(syntax))
				emit_Interface_SemicolonKeyword_6_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Model_SemicolonKeyword_5_1_q.equals(syntax))
				emit_Model_SemicolonKeyword_5_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_StructDecl_SemicolonKeyword_5_1_q.equals(syntax))
				emit_StructDecl_SemicolonKeyword_5_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     literals+=Literal (ambiguity) '}' (rule end)
	 *     literals+=Literal (ambiguity) literals+=Literal
	 */
	protected void emit_EnumDecl_SemicolonKeyword_4_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     member+=Member (ambiguity) '}' (rule end)
	 *     member+=Member (ambiguity) member+=Member
	 */
	protected void emit_Exception_SemicolonKeyword_3_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     importUri=STRING (ambiguity) (rule end)
	 */
	protected void emit_Include_SemicolonKeyword_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     methods+=Method (ambiguity) '}' (rule end)
	 *     methods+=Method (ambiguity) methods+=Method
	 */
	protected void emit_Interface_SemicolonKeyword_6_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     interfaces+=Interface (ambiguity) '}' (rule end)
	 *     interfaces+=Interface (ambiguity) interfaces+=Interface
	 *     interfaces+=Interface (ambiguity) types+=TypeDecl
	 *     types+=TypeDecl (ambiguity) '}' (rule end)
	 *     types+=TypeDecl (ambiguity) interfaces+=Interface
	 *     types+=TypeDecl (ambiguity) types+=TypeDecl
	 */
	protected void emit_Model_SemicolonKeyword_5_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     member+=Member (ambiguity) '}' (rule end)
	 *     member+=Member (ambiguity) member+=Member
	 */
	protected void emit_StructDecl_SemicolonKeyword_5_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
