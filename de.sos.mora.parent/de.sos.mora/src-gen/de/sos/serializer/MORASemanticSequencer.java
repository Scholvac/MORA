/*
 * generated by Xtext 2.19.0
 */
package de.sos.serializer;

import com.google.inject.Inject;
import de.sos.mORA.Annotation;
import de.sos.mORA.CSharpOptions;
import de.sos.mORA.CppOptions;
import de.sos.mORA.EnumDecl;
import de.sos.mORA.Include;
import de.sos.mORA.Interface;
import de.sos.mORA.JavaOptions;
import de.sos.mORA.ListTypeDecl;
import de.sos.mORA.Literal;
import de.sos.mORA.MORAPackage;
import de.sos.mORA.Member;
import de.sos.mORA.Method;
import de.sos.mORA.Model;
import de.sos.mORA.Options;
import de.sos.mORA.PrimTypeDecl;
import de.sos.mORA.StructDecl;
import de.sos.services.MORAGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class MORASemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MORAGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MORAPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MORAPackage.ANNOTATION:
				sequence_Annotation(context, (Annotation) semanticObject); 
				return; 
			case MORAPackage.CSHARP_OPTIONS:
				sequence_CSharpOptions(context, (CSharpOptions) semanticObject); 
				return; 
			case MORAPackage.CPP_OPTIONS:
				sequence_CppOptions(context, (CppOptions) semanticObject); 
				return; 
			case MORAPackage.ENUM_DECL:
				sequence_EnumDecl(context, (EnumDecl) semanticObject); 
				return; 
			case MORAPackage.EXCEPTION:
				sequence_Exception(context, (de.sos.mORA.Exception) semanticObject); 
				return; 
			case MORAPackage.INCLUDE:
				sequence_Include(context, (Include) semanticObject); 
				return; 
			case MORAPackage.INTERFACE:
				sequence_Interface(context, (Interface) semanticObject); 
				return; 
			case MORAPackage.JAVA_OPTIONS:
				sequence_JavaOptions(context, (JavaOptions) semanticObject); 
				return; 
			case MORAPackage.LIST_TYPE_DECL:
				sequence_ListTypeDecl(context, (ListTypeDecl) semanticObject); 
				return; 
			case MORAPackage.LITERAL:
				sequence_Literal(context, (Literal) semanticObject); 
				return; 
			case MORAPackage.MEMBER:
				sequence_Member(context, (Member) semanticObject); 
				return; 
			case MORAPackage.METHOD:
				sequence_Method(context, (Method) semanticObject); 
				return; 
			case MORAPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case MORAPackage.OPTIONS:
				sequence_Options(context, (Options) semanticObject); 
				return; 
			case MORAPackage.PARAMETER:
				sequence_Parameter(context, (de.sos.mORA.Parameter) semanticObject); 
				return; 
			case MORAPackage.PRIM_TYPE_DECL:
				sequence_PrimTypeDecl(context, (PrimTypeDecl) semanticObject); 
				return; 
			case MORAPackage.STRUCT_DECL:
				sequence_StructDecl(context, (StructDecl) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Annotation returns Annotation
	 *
	 * Constraint:
	 *     (name=ID value=STRING?)
	 */
	protected void sequence_Annotation(ISerializationContext context, Annotation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CSharpOptions returns CSharpOptions
	 *
	 * Constraint:
	 *     baseNamespace=QualifiedName
	 */
	protected void sequence_CSharpOptions(ISerializationContext context, CSharpOptions semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MORAPackage.Literals.CSHARP_OPTIONS__BASE_NAMESPACE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MORAPackage.Literals.CSHARP_OPTIONS__BASE_NAMESPACE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCSharpOptionsAccess().getBaseNamespaceQualifiedNameParserRuleCall_4_0(), semanticObject.getBaseNamespace());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     CppOptions returns CppOptions
	 *
	 * Constraint:
	 *     baseNamespace=QualifiedName
	 */
	protected void sequence_CppOptions(ISerializationContext context, CppOptions semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MORAPackage.Literals.CPP_OPTIONS__BASE_NAMESPACE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MORAPackage.Literals.CPP_OPTIONS__BASE_NAMESPACE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCppOptionsAccess().getBaseNamespaceQualifiedNameParserRuleCall_4_0(), semanticObject.getBaseNamespace());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TypeDecl returns EnumDecl
	 *     SingleTypeDecl returns EnumDecl
	 *     EnumDecl returns EnumDecl
	 *
	 * Constraint:
	 *     (doc=ML_COMMENT? name=ID literals+=Literal+)
	 */
	protected void sequence_EnumDecl(ISerializationContext context, EnumDecl semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Exception returns Exception
	 *
	 * Constraint:
	 *     (name=ID member+=Member*)
	 */
	protected void sequence_Exception(ISerializationContext context, de.sos.mORA.Exception semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Include returns Include
	 *
	 * Constraint:
	 *     importUri=STRING
	 */
	protected void sequence_Include(ISerializationContext context, Include semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MORAPackage.Literals.INCLUDE__IMPORT_URI) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MORAPackage.Literals.INCLUDE__IMPORT_URI));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIncludeAccess().getImportUriSTRINGTerminalRuleCall_1_0(), semanticObject.getImportUri());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Interface returns Interface
	 *
	 * Constraint:
	 *     (doc=ML_COMMENT? anno+=Annotation* name=ID (parents+=[Interface|QualifiedName] parents+=[Interface|QualifiedName]*)? methods+=Method*)
	 */
	protected void sequence_Interface(ISerializationContext context, Interface semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JavaOptions returns JavaOptions
	 *
	 * Constraint:
	 *     basePackage=QualifiedName
	 */
	protected void sequence_JavaOptions(ISerializationContext context, JavaOptions semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MORAPackage.Literals.JAVA_OPTIONS__BASE_PACKAGE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MORAPackage.Literals.JAVA_OPTIONS__BASE_PACKAGE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJavaOptionsAccess().getBasePackageQualifiedNameParserRuleCall_4_0(), semanticObject.getBasePackage());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TypeDecl returns ListTypeDecl
	 *     ListTypeDecl returns ListTypeDecl
	 *
	 * Constraint:
	 *     (doc=ML_COMMENT? (valueType=[SingleTypeDecl|QualifiedName] | primType=PrimTypeLiteral) name=ID)
	 */
	protected void sequence_ListTypeDecl(ISerializationContext context, ListTypeDecl semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Literal returns Literal
	 *
	 * Constraint:
	 *     (doc=ML_COMMENT? name=ID value=INT?)
	 */
	protected void sequence_Literal(ISerializationContext context, Literal semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Member returns Member
	 *
	 * Constraint:
	 *     (doc=ML_COMMENT? anno+=Annotation* (complexType=[TypeDecl|QualifiedName] | primType=PrimTypeLiteral) name=ID)
	 */
	protected void sequence_Member(ISerializationContext context, Member semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Method returns Method
	 *
	 * Constraint:
	 *     (
	 *         doc=ML_COMMENT? 
	 *         (returnProxyType=[Interface|ID] | complexType=[TypeDecl|QualifiedName] | primType=PrimTypeLiteral) 
	 *         name=ID 
	 *         (parameters+=Parameter parameters+=Parameter*)? 
	 *         (exceptions+=Exception exceptions+=Exception*)?
	 *     )
	 */
	protected void sequence_Method(ISerializationContext context, Method semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     (includes+=Include* options=Options? name=ID (interfaces+=Interface | types+=TypeDecl)*)
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Options returns Options
	 *
	 * Constraint:
	 *     (javaOptions=JavaOptions | csOptions=CSharpOptions | cppOptions=CppOptions)+
	 */
	protected void sequence_Options(ISerializationContext context, Options semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns Parameter
	 *
	 * Constraint:
	 *     ((complexType=[TypeDecl|QualifiedName] | primType=PrimTypeLiteral | proxyType=[Interface|ID]) name=ID)
	 */
	protected void sequence_Parameter(ISerializationContext context, de.sos.mORA.Parameter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TypeDecl returns PrimTypeDecl
	 *     SingleTypeDecl returns PrimTypeDecl
	 *     PrimTypeDecl returns PrimTypeDecl
	 *
	 * Constraint:
	 *     name=PrimTypeLiteral
	 */
	protected void sequence_PrimTypeDecl(ISerializationContext context, PrimTypeDecl semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MORAPackage.Literals.PRIM_TYPE_DECL__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MORAPackage.Literals.PRIM_TYPE_DECL__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPrimTypeDeclAccess().getNamePrimTypeLiteralEnumRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TypeDecl returns StructDecl
	 *     SingleTypeDecl returns StructDecl
	 *     StructDecl returns StructDecl
	 *
	 * Constraint:
	 *     (doc=ML_COMMENT? anno+=Annotation* name=ID member+=Member*)
	 */
	protected void sequence_StructDecl(ISerializationContext context, StructDecl semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
