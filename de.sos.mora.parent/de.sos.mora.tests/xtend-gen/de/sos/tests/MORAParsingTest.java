/**
 * generated by Xtext 2.19.0
 */
package de.sos.tests;

import com.google.inject.Inject;
import de.sos.mORA.Model;
import de.sos.tests.MORAInjectorProvider;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;

@ExtendWith(InjectionExtension.class)
@InjectWith(MORAInjectorProvider.class)
@SuppressWarnings("all")
public class MORAParsingTest {
  @Inject
  private ParseHelper<Model> parseHelper;
  
  @Test
  public void loadModel() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.newLine();
      _builder.append("options{ ");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("java {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("base-package = de.sos.mora.examples");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("csharp {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("base-namespace = De.Sos.MORA.Examples");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("cpp {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("base-namespace = de::sos::mora::examples");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("package serialize {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("//MORA reMOte pRoxy cAll");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("enum MyEnum {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("KEY;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("VALUE;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("struct SimpleStruct {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("bool boolValue;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("byte byteValue;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("short shortValue;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("int intValue;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("long longValue;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("float floatValue; ");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("double doubleValue;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("string stringValue;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("MyEnum enumValue; ");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("SimpleStruct structValue;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("List<bool> BoolList;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("List<byte> ByteList;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("List<short> ShortList;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("List<int>\tIntList;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("List<long> LongList;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("List<float> FloatList;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("List<double> DoubleList;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("List<string> StringList;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("List<MyEnum> MyEnumList;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("List<SimpleStruct> SimpleStructList;");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("struct ListStruct {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("BoolList boolListValue;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("ByteList byteListValue;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("ShortList shortListValue;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("IntList\tintListValue;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("LongList\tlongListValue;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("FloatList floatListValue;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("DoubleList doubleListValue;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("StringList stringListValue;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("MyEnumList enumListValue;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("SimpleStructList structListValue;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("List<ListStruct> ListListStruct;");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("interface Callback {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("void onEcho(float value);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("interface ExtendedCallback extends Callback {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("void extendedEcho(float value);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("interface EchoManager {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("bool echo(bool value);");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("byte echo(byte value);");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("short echo(short value);");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("int echo(int value);");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("long echo(long value);");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("float echo(float value);");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("double echo(double value);");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("string echo(string value);");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("MyEnum echo(MyEnum value);");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("SimpleStruct echo(SimpleStruct value);");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("ListStruct echo(ListStruct value);");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("BoolList echo1(BoolList value);");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("ByteList echo2(ByteList value);");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("ShortList echo3(ShortList value);");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("IntList echo4(IntList value);");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("LongList echo5(LongList value);");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("FloatList echo6(FloatList value);");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("DoubleList echo7(DoubleList value);");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("StringList echo8(StringList value);");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("MyEnumList echo9(MyEnumList value);");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("SimpleStructList echo10(SimpleStructList value);");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("ListListStruct echo11(ListListStruct value);");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("void setCallback(Callback* cb, float firstValue);");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("Callback* getCallback();");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("void throwUnknownException();");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("}   ");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
